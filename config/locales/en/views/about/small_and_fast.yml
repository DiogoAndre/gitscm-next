en:
  about:
    small_and_fast:
      small_and_fast: Small and Fast
      p1_html: '<strong>Git is fast</strong>. With Git, nearly all operations are performed locally, giving it a huge speed advantage on centralized systems that constantly have to communicate with a server somewhere.'
      p2: "Git was built to work on the Linux kernel, meaning that it has had to effectively handle large repositories from day one. Git is written in C, reducing the overhead of runtimes associated with higher-level languages. Speed and performance has been a primary design goal of the Git from the start."
      benchmarks: Benchmarks
      p3_html: "Let's see how common {operations} stack up against Subversion, a common centralized version control system that is similar to CVS or Perforce. <em>Smaller is faster.</em>"
      img_alt_init_benchmarks: init benchmarks
      p4: For testing, large AWS instances were set up in the same availability zone.
        Git and SVN were installed on both machines, the Ruby repository was copied to
        both Git and SVN servers, and common operations were performed on both.
      p5: "In some cases the commands don't match up exactly. Here, matching on the lowest
        common denominator was attempted. For example, the 'commit' tests also include
        the time to push for Git, though most of the time you would not actually be pushing
        to the server immediately after a commit where the two commands cannot be separated
        in SVN."
      p6: All of these times are in seconds.
      # <table>
      operation: Operation
      table_row_1: Commit Files (A)
      table_row_1_desc: "Add, commit and push 113 modified files (2164+, 2259-)"
      table_row_2: Commit Images (B)
      table_row_2_desc: "Add, commit and push 1000 1k images"
      table_row_3: Diff Current
      table_row_3_desc: "Diff 187 changed files (1664+, 4859-) against last commit"
      table_row_4: Diff Recent
      table_row_4_desc: "Diff against 4 commits back (269 changed/3609+,6898-)"
      table_row_5: Diff Tags
      table_row_5_desc: "Diff two tags against each other (v1.9.1.0/v1.9.3.0 )"
      table_row_6: Log (50)
      table_row_6_desc: "Log of the last 50 commits (19k of output)"
      table_row_7: Log (All)
      table_row_7_desc: "Log of all commits (26,056 commits - 9.4M of output)"
      table_row_8: Log (File)
      table_row_8_desc: "Log of the history of a single file (array.c - 483 revs)"
      table_row_9: Update
      table_row_9_desc: "Pull of Commit A scenario (113 files changed, 2164+, 2259-)"
      table_row_10: Blame
      table_row_10_desc: "Line annotation of a single file (array.c)"
      # </table>
      p7: Note that this is the best case scenario for SVN - a server with no load with an
        80MB/s bandwidth connection to the client machine.  Nearly all of these
        times would be even worse for SVN if that connection was slower, while
        many of the Git times would not be affected.
      p8_html: Clearly, in many of these common version control operations, <strong>Git is
        one or two orders of magnitude faster than SVN</strong>, even under ideal conditions
        for SVN.
      p9: "One place where Git is slower is in the initial clone operation.
        Here, Git is downloading the entire history rather than only the latest
        version. As seen in the above charts, it's not considerably slower for an operation
        that is only performed once."
      operation: Operation
      clone: Clone
      clone_desc: Clone and shallow clone(*) in Git vs checkout in SVN
      size_m: Size (M)
      size_m_desc: Size of total client side data and files after clone/checkout (in M)
      p10: "It's also interesting to note that the size of the data on the client side
        is very similar even though Git also has every version of every file for the
        entire history of the project. This illustrates how efficient it is at compressing
        and storing data on the client side."
      # bottom links
      branching_and_merging: "← Branching and Merging"
      distributed: "Distributed →"
        
        
